/**
 * FirstLanguage APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ApiClassify426Error } from '../errors/apiClassify426Error';
import { ErrorsError } from '../errors/errorsError';
import { M426Error } from '../errors/m426Error';
import { ApiNerResponse, apiNerResponseSchema } from '../models/apiNerResponse';
import { ApiQaResponse, apiQaResponseSchema } from '../models/apiQaResponse';
import {
  Responseclassify,
  responseclassifySchema,
} from '../models/responseclassify';
import { array} from '../schema';
import { BaseController } from './baseController';

export class AdvancedAPIsController extends BaseController {

  tryParseJSONObject (jsonString: string){
    try {
        var o = JSON.parse(jsonString);

        // Handle non-exception-throwing cases:
        // Neither JSON.parse(false) or JSON.parse(1234) throw errors, hence the type-checking,
        // but... JSON.parse(null) returns null, and typeof null === "object", 
        // so we must check for that, too. Thankfully, null is falsey, so this suffices:
        if (o && typeof o === "object") {
            return o;
        }
    }
    catch (e) { }

    return false;
  };


  /**
   * # Stemmer : Defintion and it's usage
   *
   * # Languages covered:
   *
   * @param body         Add a JSON Input as per the schema defined below
   * @return Response from the API call
   */
  async getClassification(
    body: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Responseclassify>> {
    const req = this.createRequest('POST', '/api/classify');
    const mapped = this.tryParseJSONObject(body)
    req.header('Content-Type', 'application/json');
    req.json(mapped);
    req.throwOn(400, ErrorsError, 'Error output');
    req.throwOn(426, ApiClassify426Error, 'Please use HTTPS protocol');
    return req.callAsJson(responseclassifySchema, requestOptions);
  }

  /**
   * # Stemmer : Defintion and it's usage
   *
   * # Languages covered:
   *
   * @param body         Add a JSON Input as per the schema defined below
   * @return Response from the API call
   */
  async getQA(
    body: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ApiQaResponse>> {
    const req = this.createRequest('POST', '/api/qa');
    const mapped = this.tryParseJSONObject(body)
    req.header('Content-Type', 'application/json');
    req.json(mapped);
    req.throwOn(400, ErrorsError, 'Bad Request');
    req.throwOn(426, M426Error, 'Please use HTTPS protocol');
    return req.callAsJson(apiQaResponseSchema, requestOptions);
  }

  /**
   * # Stemmer : Defintion and it's usage
   *
   * # Languages covered:
   *
   * @param body         Add a JSON Input as per the schema defined below
   * @return Response from the API call
   */
  async getNER(
    body: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ApiNerResponse[]>> {
    const req = this.createRequest('POST', '/api/ner');
    const mapped = this.tryParseJSONObject(body)
    req.header('Content-Type', 'application/json');
    req.json(mapped);
    req.throwOn(400, ErrorsError, 'Bad Request');
    req.throwOn(426, M426Error, 'Please use HTTPS protocol');
    return req.callAsJson(array(apiNerResponseSchema), requestOptions);
  }
}
