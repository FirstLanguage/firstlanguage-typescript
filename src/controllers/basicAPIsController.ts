/**
 * FirstLanguage APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { ApiLemmatize426Error } from '../errors/apiLemmatize426Error';
import { ApiMorph426Error } from '../errors/apiMorph426Error';
import { ApiPostag426Error } from '../errors/apiPostag426Error';
import { ApiStemmer426Error } from '../errors/apiStemmer426Error';
import { ErrorsError } from '../errors/errorsError';
import { Responselemma, responselemmaSchema } from '../models/responselemma';
import { Responsemorph, responsemorphSchema } from '../models/responsemorph';
import { Responsepo, responsepoSchema } from '../models/responsepo';
import { Responsestem, responsestemSchema } from '../models/responsestem';
import { array } from '../schema';
import { BaseController } from './baseController';

export class BasicAPIsController extends BaseController {

  tryParseJSONObject (jsonString: string){
    try {
        var o = JSON.parse(jsonString);

        // Handle non-exception-throwing cases:
        // Neither JSON.parse(false) or JSON.parse(1234) throw errors, hence the type-checking,
        // but... JSON.parse(null) returns null, and typeof null === "object", 
        // so we must check for that, too. Thankfully, null is falsey, so this suffices:
        if (o && typeof o === "object") {
            return o;
        }
    }
    catch (e) { }

    return false;
  };


  /**
   * A word takes different inflectional forms. For instance, the word, "Compute" can take the forms,
   * "computing", "computation",  and "computerize". The NLP applications such as Search Engines and
   * Information Extraction would want to store the base or stem of the word, i.e "Compute" instead of
   * accomodating all its inflected forms. This will yield in dimensionality reduction and incerases the
   * efficiency of the system. The stemmer cuts the prefix and suffix of a word.
   *
   * # Languages covered:
   * Our stemmer works for the following  26 languages.
   *
   * | Languages    | ISO Code   |
   * |--------------|------------|
   * |  Arabic      |  ar        |
   * |  Catalan     |  ca        |
   * |  Danish      |  da        |
   * |  German      |  de        |
   * |  Greek       |  el        |
   * |  English     |  en        |
   * |  Spanish     |  es        |
   * |  Basque      |  eu        |
   * |  Finnish     |  fi        |
   * |  French      |  fr        |
   * |  Irish       |  ga        |
   * |  Hindi       |  hi        |
   * |  Hungarian   |  hu        |
   * |  Indonesian  |  id        |
   * |  Italian     |  it        |
   * |  Lithuanian  |  lt        |
   * |  Nepali      |  ne        |
   * |  Dutch       |  nl        |
   * |  Norwegian   |  no        |
   * |  Portuguese  |  pt        |
   * |  Romanian    |  ro        |
   * |  Russian     |  ru        |
   * |  Serbian     |  sr        |
   * |  Swedish     |  sv        |
   * |  Tamil       |  ta        |
   * |  Turkish     |  tr        |
   *
   *
   * @param body         Add a JSON Input as per the schema defined below  **Size limit:**   1MB for both
   *                                text and URL input  **URL Input:**  For URL, we now accept 4 contentTypes. * html *
   *                                plaintext * pdf * docx  If you are providing Google drive or Google Spreadsheet url,
   *                                ensure that you provide a link which can download the file directly and not the
   *                                share link.  Example for Google Drive link:   https://drive.google.com/uc?
   *                                id=idofthefile
   * @return Response from the API call
   */
  async getStemmer(
    body: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Responsestem[]>> {
    const req = this.createRequest('POST', '/api/stemmer');
    const mapped = this.tryParseJSONObject(body)
    req.header('Content-Type', 'application/json');
    req.json(mapped);
    req.throwOn(400, ErrorsError, 'Error output');
    req.throwOn(426, ApiStemmer426Error, 'Please use HTTPS protocol');
    req.throwOn(429, ApiError, 'Too Many Requests');
    return req.callAsJson(array(responsestemSchema), requestOptions);
  }

  /**
   * Lemmatizer is similar to stemmer that gives the stemmed version of a word but lemmatizer differs
   * from the stemmer in giving a meaningful stem or the lemma. For instance, for the word, "smiling",
   * the stemmer would give, "smil", stemming the suffix, "ing" but the lemmatizer would give the
   * meaningful stem, "smile". lemmatizers can be used in applications such as,  Machine Translation,
   * Search Engines, Text Summarization etc.
   *
   * # Languages covered:
   * | Languages          | ISO Code |
   * |--------------------|----------|
   * | Catalan            | ca       |
   * | Danish             | da       |
   * | Dutch              | nl       |
   * | English            | en       |
   * | French             | fr       |
   * | German             | de       |
   * | Greek              | el       |
   * | Italian            | it       |
   * | Lithuanian         | lt       |
   * | Macedonian         | mk       |
   * | Norwegian (Bokmål) | nb       |
   * | Polish             | pl       |
   * | Portuguese         | pt       |
   * | Romanian           | ro       |
   * | Russian            | ru       |
   * | Spanish            | es       |
   *
   *
   *
   *
   *
   * @param body         Add a JSON Input as per the schema defined below  **Size limit:**   1MB for both
   *                                text and URL input  **URL Input:**  For URL, we now accept 4 contentTypes. * html *
   *                                plaintext * pdf * docx  If you are providing Google drive or Google Spreadsheet url,
   *                                ensure that you provide a link which can download the file directly and not the
   *                                share link.  Example for Google Drive link:   https://drive.google.com/uc?
   *                                id=idofthefile
   * @return Response from the API call
   */
  async getLemma(
    body: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Responselemma[]>> {
    const req = this.createRequest('POST', '/api/lemmatize');
    const mapped = this.tryParseJSONObject(body)
    req.header('Content-Type', 'application/json');
    req.json(mapped);
    req.throwOn(400, ErrorsError, 'Error output');
    req.throwOn(426, ApiLemmatize426Error, 'Please use HTTPS protocol');
    req.throwOn(429, ApiError, 'Too Many Requests');
    return req.callAsJson(array(responselemmaSchema), requestOptions);
  }

  /**
   * Morphological Analyzer analyzes how a word is formed. It breaks a word into smaller units called,
   * "morphemes" and gives a clue on the pattern of words of a particular langauge.  It can be used for
   * building applications such as,  Machine Translation, Text Summarization, Search systems etc.
   *
   *
   * # Languages covered:
   * | Languages          | ISO Code |
   * |--------------------|----------|
   * | Catalan            | ca       |
   * | Danish             | da       |
   * | Dutch              | nl       |
   * | English            | en       |
   * | French             | fr       |
   * | German             | de       |
   * | Greek              | el       |
   * | Italian            | it       |
   * | Japanese           | ja       |
   * | Lithuanian         | lt       |
   * | Macedonian         | mk       |
   * | Norwegian (Bokmål) | nb       |
   * | Polish             | pl       |
   * | Portuguese         | pt       |
   * | Russian            | ru       |
   * | Spanish            | es       |
   *
   *
   * @param body         Add a JSON Input as per the schema defined below  **Size limit:**   1MB for both
   *                                text and URL input  **URL Input:**  For URL, we now accept 4 contentTypes. * html *
   *                                plaintext * pdf * docx  If you are providing Google drive or Google Spreadsheet url,
   *                                ensure that you provide a link which can download the file directly and not the
   *                                share link.  Example for Google Drive link:   https://drive.google.com/uc?
   *                                id=idofthefile
   * @return Response from the API call
   */
  async getMorph(
    body: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Responsemorph>> {
    const req = this.createRequest('POST', '/api/morph');
    const mapped = this.tryParseJSONObject(body)
    req.header('Content-Type', 'application/json');
    req.json(mapped);
    req.throwOn(400, ErrorsError, 'Error output');
    req.throwOn(426, ApiMorph426Error, 'Please use HTTPS protocol');
    req.throwOn(429, ApiError, 'Too Many Requests');
    return req.callAsJson(responsemorphSchema, requestOptions);
  }

  /**
   * Parts of Speech Tagger, which is shortly known as POS Tagger is a software that automatically finds
   * the word classes, when a text input is given. The text input can be a word, a sentence or a set of
   * sentences. The word classes are the grammatical categories such as, Noun, Verb, Adverb etc. The
   * category assigned to each word is called as a tag. A set of tags, each indicating a grammatical
   * category is called, "tagsets". POS tagging is a mandatory pre-processing for most of the Natural
   * Language Processing Applications such as, Information Extraction, Information Retreival systems and
   * Summary generation systems. A POS Tagger is a language-dependent software as the grammar rules will
   * differ for every language. For instance, a word ending with "ing" might indicate a "Verb" in English
   * but this will not be applicable for other languages.
   *
   *
   * # Languages covered:
   *
   * | Languages          | ISO Code |
   * |--------------------|----------|
   * | Chinese            | zh       |
   * | Dutch              | nl       |
   * | English            | en       |
   * | German             | de       |
   * | Italian            | it       |
   * | Lithuanian         | lt       |
   * | Polish             | pl       |
   * | Romanian           | ro       |
   * | Tamil              | ta       |
   *
   *
   *
   *
   * @param body         Add a JSON Input as per the schema defined below  **Size limit:**   1MB for both
   *                                text and URL input  **URL Input:**  For URL, we now accept 4 contentTypes. * html *
   *                                plaintext * pdf * docx  If you are providing Google drive or Google Spreadsheet url,
   *                                ensure that you provide a link which can download the file directly and not the
   *                                share link.  Example for Google Drive link:   https://drive.google.com/uc?
   *                                id=idofthefile
   * @return Response from the API call
   */
  async getPostag(
    body: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Responsepo[]>> {
    const req = this.createRequest('POST', '/api/postag');
    const mapped = this.tryParseJSONObject(body)
    req.header('Content-Type', 'application/json');
    req.json(mapped);
    req.throwOn(400, ErrorsError, 'Error output');
    req.throwOn(426, ApiPostag426Error, 'Please use HTTPS protocol');
    req.throwOn(429, ApiError, 'Too Many Requests');
    return req.callAsJson(array(responsepoSchema), requestOptions);
  }
}
