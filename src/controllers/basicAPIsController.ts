/**
 * FirstLanguage APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ApiLemmatize426Error } from '../errors/apiLemmatize426Error';
import { ApiMorph426Error } from '../errors/apiMorph426Error';
import { ApiPostag426Error } from '../errors/apiPostag426Error';
import { ApiStemmer426Error } from '../errors/apiStemmer426Error';
import { ErrorsError } from '../errors/errorsError';
import { Responselemma, responselemmaSchema } from '../models/responselemma';
import { Responsemorph, responsemorphSchema } from '../models/responsemorph';
import { Responsepo, responsepoSchema } from '../models/responsepo';
import { Responsestem, responsestemSchema } from '../models/responsestem';
import { array, unknown } from '../schema';
import { BaseController } from './baseController';

export class BasicAPIsController extends BaseController {
  /**
   * # Stemmer : Defintion and it's usage
   * A word takes different inflectional forms. For instance, the word, "Compute" can take the forms,
   * "computing", "computation",  and "computerize". The NLP applications such as Search Engines and
   * Information Extraction would want to store the base or stem of the word, i.e "Compute" instead of
   * accomodating all its inflected forms. This will yield in dimensionality reduction and incerases the
   * efficiency of the system. The stemmer cuts the prefix and suffix of a word.
   *
   * # Languages covered:
   * Our stemmer works for the following  26 languages. Our stemmer works using the snowball stemmer
   * algorithm which is also known as Porter 2 Stemming algorithm.
   * 1. Tamil
   * 2. Hindi
   * 3. English
   * 4. Arabic
   * 5. Basque
   * 6. Catalan
   * 7. Danish
   * 8. Dutch
   * 9. Finnish
   * 10.  French
   * 11. German
   * 12. Greek
   * 13. Hungarian
   * 14. Indonesian
   * 15. Irish
   * 16. Italian
   * 17. Lithuanian
   * 18. Nepali
   * 19. Norwegian
   * 20. Portuguese
   * 21. Romanian
   * 22. Russian
   * 23. Serbian
   * 24. Spanish
   * 25. Swedish
   * 26. Turkish
   *
   *
   * @param body         Add a JSON Input as per the schema defined below
   * @return Response from the API call
   */
  async getStemmer(
    body: unknown,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Responsestem[]>> {
    const req = this.createRequest('POST', '/api/stemmer');
    const mapped = req.prepareArgs({ body: [body, unknown()] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ErrorsError, 'Error output');
    req.throwOn(426, ApiStemmer426Error, 'Please use HTTPS protocol');
    return req.callAsJson(array(responsestemSchema), requestOptions);
  }

  /**
   * # Stemmer : Defintion and it's usage
   *
   * # Languages covered:
   *
   * @param body         Add a JSON Input as per the schema defined below
   * @return Response from the API call
   */
  async getLemma(
    body: unknown,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Responselemma[]>> {
    const req = this.createRequest('POST', '/api/lemmatize');
    const mapped = req.prepareArgs({ body: [body, unknown()] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ErrorsError, 'Error output');
    req.throwOn(426, ApiLemmatize426Error, 'Please use HTTPS protocol');
    return req.callAsJson(array(responselemmaSchema), requestOptions);
  }

  /**
   * # Stemmer : Defintion and it's usage
   *
   * # Languages covered:
   *
   * @param body         Add a JSON Input as per the schema defined below
   * @return Response from the API call
   */
  async getMorph(
    body: unknown,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Responsemorph>> {
    const req = this.createRequest('POST', '/api/morph');
    const mapped = req.prepareArgs({ body: [body, unknown()] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ErrorsError, 'Error output');
    req.throwOn(426, ApiMorph426Error, 'Please use HTTPS protocol');
    return req.callAsJson(responsemorphSchema, requestOptions);
  }

  /**
   * 
   * **So, What is a POS Tagger?**
   *
   * Parts Of Speech Tagger, which is shortly known as POS Tagger is a software that automatically
   * finds the word classes, when a text input is given. The text input can be a word, a sentence or a
   * set of sentences. The word classes are the grammatical categories such as, Noun, Verb, Adverb etc.
   * These category assigned to each word is a tag. A set of tags, each indicating a grammatical category
   * is called, "tagsets". POS tagging is a mandatory pre processing for most of the Natural Language
   * Processing Applications such as, Information Extraction, Information Retreival systems and Summary
   * generation systems.
   *
   * **Is POS Tagger, a language-independent software?**
   *
   * No. A POS Tagger is a language-dependent software as the grammar rules will differ for every
   * language. For instance, A word ending with "ing" might indicate a Verb" in English but this will not
   * be applicable for other languages.
   *
   * **For what languages, our  POS Tagger API will work?**
   *
   * At present, our POS Tagger API works for English and Tami Languages. Soon we will extend the APIs to
   * accomodate more languages.
   *
   * **How Precise are our POS Tagger API?**
   *
   * will update accuracy metrics soon .....
   *
   *
   * @param body         Add a JSON Input as per the schema defined below
   * @return Response from the API call
   */
  async getPostag(
    body: unknown,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Responsepo[]>> {
    const req = this.createRequest('POST', '/api/postag');
    const mapped = req.prepareArgs({ body: [body, unknown()] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ErrorsError, 'Error output');
    req.throwOn(426, ApiPostag426Error, 'Please use HTTPS protocol');
    return req.callAsJson(array(responsepoSchema), requestOptions);
  }
}
